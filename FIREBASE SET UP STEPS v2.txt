
- also you need to keep the online firebase portal up to date, like
  having service modules installed (e.g. authentication, database)

-----------

1. Initial Setup for Firebase

(install firebase SDK and CLI so we can interact with firebase services)
>>> npm install firebase
>>> npm install -g firebase-tools

(CLI authentication)
>>> firebase login

(initialise and configure Firebase)
>>> firebase init

-----------

2. Create a React App PWA

(Create a new React application with PWA support)
>>> npx create-react-app my-app --template cra-template-pwa
>>> cd my-app
>>> npm install react-scripts@latest

Ensure your application meets PWA criteria by checking that it:
- Is served over HTTPS.
- Registers a service worker.
- Has a web manifest with the appropriate icon sizes and start URL.

(Turn your React app into a PWA by customizing the service worker and manifest.json file located in the public directory.)

-----------

3. Edit Key Files in your Codebase

firebaseConfig.js - 
> import { initializeApp } from "firebase/app";
> import { getAuth, connectAuthEmulator } from "firebase/auth";
> import { getFirestore, connectFirestoreEmulator } from "firebase/firestore";
> import { getFunctions, connectFunctionsEmulator } from 'firebase/functions';
> 
> // Replace these with your Firebase configuration details
> const firebaseConfig = {
>     apiKey: "YOUR_API_KEY",
>     authDomain: "YOUR_PROJECT_ID.firebaseapp.com",
>     projectId: "YOUR_PROJECT_ID",
>     storageBucket: "YOUR_PROJECT_ID.appspot.com",
>     messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
>     appId: "YOUR_APP_ID"
> };
> 
> // Initialize Firebase SDK
> const app = initializeApp(firebaseConfig);
> 
> // Initialize services
> const auth = getAuth(app); // Using the modular function
> const db = getFirestore(app); // Using the modular function
> const functions = getFunctions(app); // Using the modular function`
> 
> // Use emulator if in development, this is critical but don't fully get it
> if (window.location.hostname === "localhost") {
> 
>     // For Firestore
>     connectFirestoreEmulator(db, "localhost", 8080);
> 
>     // For Authentication
>     connectAuthEmulator(auth, "http://localhost:9099");
> 
>     // For Cloud Functions (if you're using it)
>     connectFunctionsEmulator(functions, "localhost", 5001);
> 
>     // For Storage
>     // connectStorageEmulator(storage, "localhost", 9199);
> 
>     // For Firebase Realtime Database (if you're using it)
>     // const realDb = getDatabase(app);
>     // connectDatabaseEmulator(realDb, "localhost", 9000);
>   }
> 
> export { auth, db };

Note: Replace the placeholders with your actual Firebase project settings.

firebase.json code snippet -
> "emulators": {
>     "auth": {
>       "port": 9099
>     },
>     "functions": {
>       "port": 5001
>     },
>     "firestore": {
>       "port": 8080
>     },
>     "database": {
>       "port": 9000
>     },
>     "hosting": {
>       "port": 5000
>     },
>     "pubsub": {
>       "port": 8085
>     },
>     "storage": {
>       "port": 9199
>     },
>     "eventarc": {
>       "port": 9299
>     },
>     "ui": {
>       "enabled": true
>     },
>     "singleProjectMode": true
>   }, 

Note: Configure firebase.json to define hosting behavior, such as rewrites for a single-page app, and ensure all settings are correct for local emulation and deployment

-----------

4. Local Development

SAM
(start the emulators)
>>> d:
>>> cd "Users\sllan\Documents\Personal_Projects\Social Physical\sociacise\my-app"
>>> npm start

(loads website locally)
>>> d:
>>> cd "Users\sllan\Documents\Personal_Projects\Social Physical\sociacise\my-app"
>>> firebase emulators:start

MORGAN
>>> d:
>>> cd FILEPATH
>>> npm start

(loads website locally)
>>> d:
>>> cd FILEPATH
>>> firebase emulators:start

Note: Ensure firebaseConfig.js includes local pointers for Firestore, Authentication, etc. Enable authentication in the Firebase console.

-----------

5. Deploying Local Changes to Live Firebase Hosting

Important: I had to enable billing for the project on the Google Cloud side, not the firebase side.
https://console.cloud.google.com/billing/projects

>>> d:
>>> cd "Users\sllan\Documents\Personal_Projects\button auto diary\button-logger-react-pwa"
>>> npm run build
>>> firebase deploy

Note: Always confirm that Firebase security rules are properly set up before deploying to production, especially for Firestore and Realtime Database.

-----------

6. Additional Resources and Command Variants

https://youtu.be/SAwxUq0kiZY?t=176

https://firebase.google.com/docs/hosting/quickstart

https://firebase.google.com/docs/hosting

>>> firebase init hosting
 - specify firebase project to connect to local project directory.
 - specify public now or later in the firebase.json configuration file.
 - specify site configuration, such as a one-page app.

>>> firebase init functions
 - if you just want to re-generate the boiler plate code for the functions folder.

>>> firebase hosting:channel:deploy
 - to create and deploy to a preview channel. Set up the GitHub integration for easy iterations of your previewed content.

>>> firebase deploy --only hosting
 - only frontend changes, no Cloud Functions, Firestore security rules, database triggers etc.

>>> firebase deploy --only hosting,database,firestore,storage
 - to just exclude functions I think...

-----------

Link to a Firebase Web App

Always refer to the latest Firebase documentation and resources for updates and detailed explanations.

Might need a Google cloud app engine to use cloud functions, and 
